from abc import ABC, abstractclassmethod, abstractproperty
from datetime import datetime


class conta:
    def __init__(self , numero, cliente):
        self._saldo = 0
        self._numero = numero
        self._agencia = "0001"
        self._cliente = cliente
        self._historico = Historico()
    
    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(numero, cliente)
    
    @property
    def saldo(self):
        return self._saldo

    @property
    def numero(self):
        return self._numero
    
    @property
    def agencia(self):
        return self._agencia
    
    @property
    def cliente(self):
        return self._cliente
    
    @property
    def historico(self):
        return self._historico
    
    def sacar(self, valor:float):
        saldo = self.saldo
        saldo_excedido = valor > saldo

        self.valor = valor
        if valor> 0:
            self._saldo -= valor
            print("saque realizado")
            return True
        elif saldo_excedido:
            print("Saldo insuficiente")
            return False
        else:
            print("operação inválida")
            return False

    
    def depositar(self, valor:float):
        if valor > 0:
            self._saldo += valor
            print("Deposito realizado")
            return True
        else:
            print("Operação inválida")
            return False
    
class conta_corrente(conta):
    def __init__(self, numero, cliente, limite=500, limite_saques=3):
        super().__init__(numero, cliente)
        self._limite = limite
        self._limite_saques = limite_saques

    def sacar(self, valor):
        numero_saques = len([transacao for transacao in self.historico.transacoes if transacao["tipo"] == saque.__name__])
        
        limite_excedido = valor > self._limite
        saque_excedido = numero_saques > self._limite_saques

        if limite_excedido:
            print("limite excedido. operação falhou")

        elif saque_excedido:
            print ("numero maximo de saques excedido")
        
        else:
            return super().sacar(valor)
        return False
    
    def __str__(self):
        return f"""
        Agência: \n {self.agencia}
        Conta Corrente: \n {self.numero}
        Titular: \n {self.cliente.nome}
        """

    #def depositar(self, valor: float):
    #    return super().depositar(valor)
    
class Historico:
    def __init__(self):
        self._transacoes = []

    @property
    def transacoes(self):
        return self._transacoes 
       
    def adicionar_transacao(self, transacao):
        self._transacoes.append(
            {
                "tipo": transacao.__class__.__name__,
                "valor": transacao.valor
            }
        )

class transacao(ABC):
    @property
    @abstractproperty
    def valor (self):
        pass

    @abstractclassmethod
    def registrar (self, conta):
        pass

class deposito (transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar( self, conta):
        sucesso_transacao = conta.depositar(self.valor)
        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)
            
class saque(transacao):
    def __init__ (self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar( self, conta):
        sucesso_transacao = conta.sacar(self.valor)

        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)

class cliente:
    def __init__(self, endereco: str):
        self.endereco = endereco
        self.contas = []
    
    def realizar_transacao(self , conta, transacao):
        transacao.registrar(conta)

    def adicionar_contas (self, conta):
        self.contas.append(conta)

class pessoa_fisica (cliente):
    def __init__(self, cpf, nome, data_nascimento, endereco):
        super().__init__(endereco)
        self.cpf = cpf
        self.nome = nome
        self.data_nascimento = data_nascimento

def menu():
    menu = """
--------------------------MENU-------------------------
    [1] Depositar
    [2] Sacar
    [3] Extrato
    [4] Criar Usuário
    [5] Criar conta corrente
    [6] Listar contas
    [7] Sair
    """
    return input (menu)

def filtrar_cliente(cpf, clientes):
    clientes_filtrados = [cliente for cliente in clientes if cliente.cpf == cpf]
    return clientes_filtrados[0] if clientes_filtrados else None

def recuperar_conta_cliente(cliente):
    if not cliente.contas:
        print("\nCliente não possui conta!")
        return
    return cliente.contas[0]

def depositar(clientes):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print("\n Cliente não encontrado!")
        return

    valor = float(input("Informe o valor do depósito: "))
    transacao = deposito(valor)

    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return

    cliente.realizar_transacao(conta, transacao)

def sacar(clientes):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print("\n Cliente não encontrado!")
        return

    valor = float(input("Informe o valor do saque: "))
    transacao = saque(valor)

    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return

    cliente.realizar_transacao(conta, transacao)

def exibir_extrato(clientes):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print("Cliente não encontrado!")
        return

    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return

    print("\n================ EXTRATO ================")
    transacoes = conta.historico.transacoes

    extrato = ""
    if not transacoes:
        extrato = "Não foram realizadas movimentações."
    else:
        for transacao in transacoes:
            extrato += f"\n{transacao['tipo']}:\n\tR$ {transacao['valor']:.2f}"

    print(extrato)
    print(f"\nSaldo:\n\tR$ {conta.saldo:.2f}")
    print("================================")

def criar_cliente(clientes):
    cpf = input("Informe o CPF (somente número): ")
    cliente = filtrar_cliente(cpf, clientes)

    if cliente:
        print("\n Numero de CPF ja utilizado!")
        return

    nome = input("Informe o nome completo: ")
    data_nascimento = input("Informe a data de nascimento (dd-mm-aaaa): ")
    endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/sigla estado): ")

    cliente = pessoa_fisica(nome=nome, data_nascimento=data_nascimento, cpf=cpf, endereco=endereco)

    clientes.append(cliente)

    print("\nCliente criado com sucesso!")

def criar_conta(numero_conta, clientes, contas):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print("\nCliente não encontrado! Voltando ao menu")
        return

    conta = conta_corrente.nova_conta(cliente=cliente, numero=numero_conta)
    contas.append(conta)
    cliente.contas.append(conta)

    print("\nConta criada com sucesso!")

def listar_contas(contas):
    for conta in contas:
        print("=" * 100)
        print(str(conta))

def main():
    clientes = []
    contas = []
    while True:
        opcao = menu()
        if opcao == "1":
            print("---------------Deposito---------------")
            depositar(clientes)
        elif opcao == "2":
            print("---------------Saque---------------")
            sacar(clientes)
        elif opcao == "3":
            print("---------------Extrato---------------")
            exibir_extrato(clientes)
        elif opcao == "4":
            print("---------------Criar cliente---------------")
            criar_cliente(clientes)
        elif opcao == "5":
            print("---------------Criar conta---------------")
            numero_conta = len(contas) + 1
            criar_conta(numero_conta , clientes, contas)
        elif opcao == "6":
            print("---------------Lista de contas---------------")
            listar_contas(contas)
        elif opcao == "7":
            break
    
        else:
            print("Operação inválida, por favor selecione a opção desejada")

main()

